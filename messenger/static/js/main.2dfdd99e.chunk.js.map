{"version":3,"sources":["components/Firebase/context.js","components/Firebase/firebase.js","components/Firebase/index.js","components/DrawerAppBar.js","components/Campaign/Thumb.js","components/Campaign/NewCampaign.js","components/NewContact.js","components/Contacts.js","components/SignIn.js","components/RedirectHandler.js","App.js","theme.js","index.js"],"names":["FirebaseContext","React","createContext","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignInWithFacebook","facebookProvider","doSignInWithTwitter","twitterProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doSendEmailVerification","currentUser","sendEmailVerification","url","process","REACT_APP_CONFIRMATION_EMAIL_REDIRECT","doPasswordUpdate","updatePassword","onAuthUserListener","next","isListening","onAuthStateChanged","authUser","uid","emailVerified","providerData","getCurrentUser","getStorageRef","storage","ref","child","app","initializeApp","this","serverValue","firestore","ServerValue","emailAuthProvider","EmailAuthProvider","db","GoogleAuthProvider","FacebookAuthProvider","TwitterAuthProvider","useStyles","makeStyles","theme","root","flexGrow","list","width","menuButton","marginRight","spacing","title","DrawerAppBar","classes","history","useHistory","useContext","useState","anchorEl","setAnchorEl","open","Boolean","handleClose","handleNavigation","route","push","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","event","currentTarget","Typography","variant","Drawer","id","onClose","List","ListItem","button","ListItemText","aria-controls","aria-haspopup","Thumb","props","loading","setLoading","thumb","setThumb","file","reader","FileReader","onloadend","result","readAsDataURL","src","alt","name","style","maxWidth","maxHeight","COLLECTION","saveCampaign","values","ownerID","a","async","campaign","doc","collection","set","NewCampaign","firebase","files","setFiles","data","URLSearchParams","useLocation","search","get","text","contacts","state","images","uploadAndGetFileURL","storageRef","metadata","contentType","type","put","snapshot","getDownloadURL","JSON","parse","sessionStorage","getItem","initialValues","validate","errors","onSubmit","setSubmitting","Promise","all","Array","from","map","console","log","docID","error","axios","post","campaignID","alert","setTimeout","render","submitForm","isSubmitting","setFieldValue","Container","label","component","TextField","length","multiple","accept","onChange","key","LinearProgress","Button","disabled","saveContact","contact","NewContact","firstName","lastName","phoneNumber","duplicate","find","value","MuiPhoneNumber","defaultCountry","onlyCountries","disableAreaCodes","phone","replace","backgroundColor","palette","background","paper","minHeight","sortOnFirstAndLast","b","aa","bb","CheckboxListSecondary","checkedContacts","setChecked","setContacts","fetchContacts","where","then","forEach","sort","setItem","stringify","handleToggle","currentIndex","findIndex","splice","checked","Link","first","last","labelId","contactForUpdate","Object","assign","updateContact","ListItemAvatar","Avatar","substr","primary","ListItemSecondaryAction","Checkbox","inputProps","Fab","fab","promises","delete","deleteContacts","SignIn","loggedIn","setLoggedIn","user","uiConfig","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","signInSuccessUrl","signInFlow","signInOptions","providerId","provider","scopes","setState","firebaseAuth","RedirectHandler","redirectRoute","actualRoute","path","to","Copyright","align","href","Date","getFullYear","createMuiTheme","main","secondary","red","A400","default","ReactDOM","ThemeProvider","CssBaseline","Provider","isReady","setIsReady","disableGutters","CircularProgress","basename","document","querySelector"],"mappings":"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","file":"static/js/main.2dfdd99e.chunk.js","sourcesContent":["import React from 'react';\n\nconst FirebaseContext = React.createContext(null);\n\nexport const withFirebase = Component => props => (\n  <FirebaseContext.Consumer>\n    {firebase => <Component {...props} firebase={firebase} />}\n  </FirebaseContext.Consumer>\n);\n\nexport default FirebaseContext;\n","import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nconst config = {\n  apiKey: \"AIzaSyAW13v7Owgxl7bmjFede3fW8z4yRhUA5i8\",\n  authDomain: \"messenger-6915d.firebaseapp.com\",\n  databaseURL: \"https://messenger-6915d.firebaseio.com\",\n  projectId: \"messenger-6915d\",\n  storageBucket: \"messenger-6915d.appspot.com\",\n  messagingSenderId: \"775400894613\",\n  appId: \"1:775400894613:web:c7a2ec7fb7a795b6bd2b9c\",\n  measurementId: \"G-7D8FVV5M3E\"\n};\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n\n    /* Helper */\n\n    this.serverValue = app.firestore.ServerValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n\n    /* Firebase APIs */\n    this.isListening = false;\n    this.auth = app.auth();\n    this.db = app.firestore();\n    this.storage = app.storage();\n\n    /* Social Sign In Method Provider */\n\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n  }\n\n  // *** Auth API ***\n\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignInWithGoogle = () =>\n    this.auth.signInWithPopup(this.googleProvider);\n\n  doSignInWithFacebook = () =>\n    this.auth.signInWithPopup(this.facebookProvider);\n\n  doSignInWithTwitter = () =>\n    this.auth.signInWithPopup(this.twitterProvider);\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n  doSendEmailVerification = () =>\n    this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT,\n    });\n\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n  // *** Merge Auth and DB User API *** //\n  onAuthUserListener = (next) => {\n      this.isListening = true;\n      this.auth.onAuthStateChanged(authUser => {\n          if (authUser) {\n              // this.user(authUser.uid)\n              //   .once('value')\n              //   .then(snapshot => {\n              //     const dbUser = snapshot.val();\n              //\n              //     // default empty roles\n              //     if (!dbUser.roles) {\n              //       dbUser.roles = {};\n              //     }\n\n              // merge auth and db user\n              authUser = {\n                  uid: authUser.uid,\n                  email: authUser.email,\n                  emailVerified: authUser.emailVerified,\n                  providerData: authUser.providerData,\n                  // ...dbUser,\n              };\n          }\n          next(authUser);\n          //     });\n          // } else {\n          //   fallback();\n          // }\n      });\n  }\n\n  // *** User API ***\n\n  getCurrentUser = () => this.auth.currentUser;\n  getStorageRef = () => this.storage.ref().child(this.auth.currentUser.uid);\n\n  // user = uid => this.db.ref(`users/${uid}`);\n  //\n  // users = () => this.db.ref('users');\n  //\n  // // *** Message API ***\n  //\n  // message = uid => this.db.ref(`messages/${uid}`);\n  //\n  // messages = () => this.db.ref('messages');\n}\n\nexport default Firebase;\n","import FirebaseContext, { withFirebase } from './context';\nimport Firebase from './firebase';\n\nexport default Firebase;\n\nexport { FirebaseContext, withFirebase };\n","import React, {useContext} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {FirebaseContext} from \"./Firebase\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    list: {\r\n        width: 250,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport default function DrawerAppBar() {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const firebase = useContext(FirebaseContext);\r\n    const currentUser = firebase.getCurrentUser();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const handleMenu = event => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    function handleNavigation(route) {\r\n        history.push(route);\r\n        handleClose();\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        onClick={handleMenu}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Title\r\n                    </Typography>\r\n                    <Drawer\r\n                        id=\"menu-appbar\"\r\n                        open={open}\r\n                        onClose={handleClose}\r\n                    >\r\n                        <List className={classes.list}>\r\n                            <ListItem button onClick={() => handleNavigation('/contacts')}>\r\n                                <ListItemText>Contacts</ListItemText>\r\n                            </ListItem>\r\n                            <ListItem button onClick={() => handleNavigation('/signIn')}>\r\n                                <ListItemText>{currentUser ? 'Sign Out' : 'Sign In'}</ListItemText>\r\n                            </ListItem>\r\n                        </List>\r\n                    </Drawer>\r\n                    {currentUser && (\r\n                        <div>\r\n                            <IconButton\r\n                                aria-label=\"account of current user\"\r\n                                aria-controls=\"menu-appbar\"\r\n                                aria-haspopup=\"true\"\r\n                                // onClick={handleMenu}\r\n                                color=\"inherit\"\r\n                            >\r\n                                <AccountCircle />\r\n                            </IconButton>\r\n\r\n                        </div>\r\n                    )}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, {useState} from 'react';\r\n\r\nexport default function Thumb(props) {\r\n    const [loading, setLoading] = useState(true);\r\n    const [thumb, setThumb] = useState();\r\n    if (!props.file) { return; }\r\n\r\n    let reader = new FileReader();\r\n\r\n    reader.onloadend = () => {\r\n        setLoading(false);\r\n        setThumb(reader.result);\r\n    };\r\n\r\n    reader.readAsDataURL(props.file);\r\n\r\n    if (loading) { return <p>loading...</p>; }\r\n\r\n    return (<img src={thumb} alt={props.file.name} style={{maxWidth: 200, maxHeight: 200}} />);\r\n}\r\n","import React, {useContext, useState} from 'react';\r\nimport {Formik, Field, Form} from 'formik';\r\nimport {\r\n    Button,\r\n    LinearProgress,\r\n} from '@material-ui/core';\r\nimport {TextField} from 'formik-material-ui';\r\nimport {FirebaseContext} from \"../Firebase\";\r\nimport Thumb from './Thumb';\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport axios from 'axios';\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nconst COLLECTION = 'campaigns';\r\n\r\nasync function saveCampaign(values, db, ownerID) {\r\n    const {id} = values;\r\n    const campaign = {ownerID, ...values};\r\n    let doc = id ? db.collection(COLLECTION).doc(id) : db.collection(COLLECTION).doc();\r\n    await doc.set(campaign);\r\n    return doc.id;\r\n}\r\n\r\n\r\nexport default function NewCampaign() {\r\n    const firebase = useContext(FirebaseContext);\r\n    const history = useHistory();\r\n    const [files, setFiles] = useState([]);\r\n    const data = new URLSearchParams(useLocation().search).get('data');\r\n    let campaign = {\r\n        title: '',\r\n        text: '',\r\n        contacts: [],\r\n        state: 'draft',\r\n        images: [],\r\n    };\r\n    if (data === 'updateCampaign') {\r\n        campaign = JSON.parse(sessionStorage.getItem('campaign'));\r\n    } else {\r\n        campaign.contacts = JSON.parse(sessionStorage.getItem('newCampaign')) || [];\r\n    }\r\n    async function uploadAndGetFileURL(file) {\r\n        const storageRef = firebase.getStorageRef();\r\n        const ref = storageRef.child(file.name);\r\n        const metadata = {\r\n            contentType: file.type\r\n        };\r\n        const snapshot = await ref.put(file, metadata);\r\n        return await snapshot.ref.getDownloadURL();\r\n    }\r\n    return (<Formik\r\n        initialValues={campaign}\r\n        validate={values => {\r\n            const errors = {};\r\n            if (!values.title) {\r\n                errors.title = 'Required';\r\n            }\r\n            return errors;\r\n        }}\r\n        onSubmit={async(values, {setSubmitting}) => {\r\n            values.images = await Promise.all(Array.from(files).map(uploadAndGetFileURL));\r\n            console.log(values);\r\n            const docID = await saveCampaign(values, firebase.db, firebase.getCurrentUser().uid);\r\n            let error = false;\r\n            try {\r\n                await axios.post('https://rackley-beagle-8612.twil.io/newcampaign', {campaignID: docID});\r\n            } catch (e) {\r\n                error = e;\r\n            }\r\n            if (error) {\r\n                alert('failed');\r\n                console.error(error);\r\n            } else {\r\n                alert('Saved successfully!');\r\n            }\r\n            setTimeout(() => history.push('/contacts'), 5000);\r\n            setSubmitting(false);\r\n        }}\r\n        render={({submitForm, isSubmitting,values, setFieldValue}) => (\r\n            <Form>\r\n                <Container maxWidth=\"md\">\r\n                    <Field\r\n                        name=\"title\"\r\n                        type=\"text\"\r\n                        label=\"Title\"\r\n                        component={TextField}\r\n                    />\r\n                    <br/>\r\n                    <Field\r\n                        name=\"text\"\r\n                        type=\"text\"\r\n                        label=\"Text\"\r\n                        component={TextField}\r\n                    />\r\n                    <br/><br/>\r\n                    <Typography variant=\"body2\" >{`Sending to ${campaign.contacts.length} contact${campaign.contacts.length >1 ? 's':''}`}</Typography>\r\n                    <br/>\r\n                    <Typography variant=\"body1\" >\r\n                        Upload Images\r\n                    </Typography>\r\n                    <input aria-label=\"upload images\" multiple name=\"uploader\" type=\"file\" accept=\"image/*\" onChange={(event) => {\r\n                        setFiles(event.currentTarget.files);\r\n                        // setFieldValue(\"file\", event.currentTarget.files[0]);\r\n                    }} />\r\n                    <br/>\r\n                    {Array.from(files).map(file => {\r\n                        return <Thumb key={file.name} file={file} />\r\n                    })}\r\n                    <br/>\r\n                    {isSubmitting && <LinearProgress/>}\r\n                    <br/>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={isSubmitting}\r\n                        onClick={submitForm}\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Container>\r\n            </Form>\r\n        )}\r\n    />)\r\n};\r\n\r\n","import React, {useContext} from 'react';\r\nimport {Formik, Field, Form} from 'formik';\r\nimport {\r\n    Button,\r\n    LinearProgress,\r\n} from '@material-ui/core';\r\nimport {TextField} from 'formik-material-ui';\r\nimport MuiPhoneNumber from 'material-ui-phone-number';\r\nimport {FirebaseContext} from \"./Firebase\";\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nasync function saveContact(values, db, ownerID) {\r\n    const {id} = values;\r\n    const contact = {ownerID, ...values};\r\n    let doc = id ? db.collection('contacts').doc(id) : db.collection('contacts').doc();\r\n    await doc.set(contact);\r\n}\r\n\r\nexport default function NewContact() {\r\n    const firebase = useContext(FirebaseContext);\r\n    const history = useHistory();\r\n    const data = new URLSearchParams(useLocation().search).get('data');\r\n    let contact = {\r\n        firstName: '',\r\n        lastName: '',\r\n        phoneNumber: '',\r\n    };\r\n    if (data === 'updateContact') {\r\n        contact = JSON.parse(sessionStorage.getItem('contact'));\r\n    }\r\n    const contacts = JSON.parse(sessionStorage.getItem('contacts'));\r\n    return (<Formik\r\n        initialValues={contact}\r\n        validate={values => {\r\n            const errors = {};\r\n            if (!values.firstName) {\r\n                errors.firstName = 'Required';\r\n            }\r\n            if (!values.phoneNumber) {\r\n                errors.phoneNumber = 'Required';\r\n            }\r\n            return errors;\r\n        }}\r\n        onSubmit={async(values, {setSubmitting}) => {\r\n            const duplicate = contacts.find((contact) => contact.phoneNumber === values.phoneNumber);\r\n            if (duplicate) {\r\n                alert(`Number already exists for ${duplicate.firstName} ${duplicate.lastName}`);\r\n            } else {\r\n                await saveContact(values, firebase.db, firebase.getCurrentUser().uid);\r\n                history.push('/contacts');\r\n                setSubmitting(false);\r\n            }\r\n        }}\r\n        render={({submitForm, isSubmitting,values, setFieldValue}) => (\r\n            <Form>\r\n                <Container maxWidth=\"md\">\r\n                    <Field\r\n                        name=\"firstName\"\r\n                        type=\"text\"\r\n                        label=\"First Name\"\r\n                        component={TextField}\r\n                    />\r\n                    <br/>\r\n                    <Field\r\n                        name=\"lastName\"\r\n                        type=\"text\"\r\n                        label=\"Last Name\"\r\n                        component={TextField}\r\n                    />\r\n                    <br/>\r\n                    <Field\r\n                        name=\"phoneNumber\"\r\n                        type=\"text\"\r\n                        label=\"Phone\"\r\n                        value={contact.phoneNumber}\r\n                        component={MuiPhoneNumber}\r\n                        defaultCountry='us' onlyCountries={['us']}\r\n                        disableAreaCodes={true}\r\n                        onChange={phone => {\r\n                            setFieldValue('phoneNumber', phone.replace(/\\(|\\)|-|\\s/g, \"\"));\r\n                        }}\r\n                    />\r\n                    <br/>\r\n                    {isSubmitting && <LinearProgress/>}\r\n                    <br/>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={isSubmitting}\r\n                        onClick={submitForm}\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Container>\r\n            </Form>\r\n        )}\r\n    />)\r\n};\r\n","import React, {useContext} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/PersonAdd';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nimport {FirebaseContext} from \"./Firebase\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        width: '100%',\r\n        backgroundColor: theme.palette.background.paper,\r\n        minHeight: 500,\r\n    },\r\n}));\r\n\r\nfunction sortOnFirstAndLast(a,b) {\r\n    var aa = a.firstName + \", \" + a.lastName,\r\n        bb = b.firstName + \", \" + b.lastName;\r\n    if (aa > bb)\r\n        return 1;\r\n    else if (aa < bb)\r\n        return -1;\r\n    return 0;\r\n}\r\nexport default function CheckboxListSecondary() {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [checkedContacts, setChecked] = React.useState([]);\r\n    let [contacts, setContacts] = React.useState([]);\r\n    const firebase = useContext(FirebaseContext);\r\n    const db = firebase.db;\r\n    const currentUser = firebase.getCurrentUser();\r\n    if (!currentUser) history.push('/signIn');\r\n    const ownerID = currentUser ? currentUser.uid : null;\r\n    const fetchContacts = () => {\r\n        db.collection('contacts').where('ownerID', '==', ownerID).get().then((snapshot) => {\r\n            contacts = [];\r\n            snapshot.forEach((doc) => {\r\n                contacts.push({\r\n                    id: doc.id,\r\n                    ...doc.data(),\r\n                })\r\n            });\r\n            contacts = contacts.sort(sortOnFirstAndLast);\r\n            sessionStorage.setItem('contacts', JSON.stringify(contacts));\r\n            setContacts(contacts);\r\n        });\r\n    };\r\n    if (!contacts.length && ownerID) {\r\n        fetchContacts();\r\n    }\r\n    const handleToggle = value => () => {\r\n        const currentIndex = checkedContacts.findIndex(contact => contact.id === value.id);\r\n        if (currentIndex === -1) {\r\n            checkedContacts.push(value);\r\n        } else {\r\n            checkedContacts.splice(currentIndex, 1);\r\n        }\r\n        value.checked = !value.checked;\r\n        setChecked([...checkedContacts]);\r\n    };\r\n    const getAvatarLabel = (first, last) => {\r\n        if (last.length) {\r\n            return first[0] + last[0];\r\n        }\r\n        return first.substr(0,2);\r\n    };\r\n    const updateContact = (contact) => {\r\n        const contactForUpdate = Object.assign(contact);\r\n        delete contactForUpdate.checked;\r\n        sessionStorage.setItem('contact', JSON.stringify(contactForUpdate));\r\n        history.push('/contacts/new?data=updateContact');\r\n    };\r\n    const newCampaign = () => {\r\n        sessionStorage.setItem('newCampaign', JSON.stringify(checkedContacts));\r\n        history.push('/campaigns/new')\r\n    };\r\n    const deleteContacts = async () => {\r\n        const promises = checkedContacts.map(async (contact) => {\r\n            await db.collection('contacts').doc(contact.id).delete();\r\n            handleToggle(contact);\r\n        });\r\n        await Promise.all(promises);\r\n        fetchContacts();\r\n    };\r\n    const selectAll = () => {\r\n        setContacts(contacts.map(contact => {contact.checked = true; return contact}));\r\n        setChecked([...contacts]);\r\n        alert('Selected all contacts');\r\n    };\r\n    return (\r\n        <div>\r\n            {checkedContacts.length > 0 && <Link onClick={selectAll}>Select all</Link>}\r\n            <List className={classes.root}>\r\n                {contacts.length > 0 && contacts.map(contact => {\r\n                    const labelId = `checkbox-list-secondary-label-${contact.id}`;\r\n                    return (\r\n                        <ListItem key={contact.id} button onClick={() => updateContact(contact)}>\r\n                            <ListItemAvatar>\r\n                                <Avatar>{getAvatarLabel(contact.firstName, contact.lastName)}</Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText id={labelId} primary={`${contact.firstName} ${contact.lastName}`} />\r\n                            <ListItemSecondaryAction>\r\n                                <Checkbox\r\n                                    edge=\"end\"\r\n                                    onChange={handleToggle(contact)}\r\n                                    checked={contact.checked}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                />\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            </List>\r\n            <Container maxWidth=\"md\">\r\n                <Fab disabled={!checkedContacts.length} className={classes.fab} onClick={() => newCampaign()}>\r\n                    <SendIcon/>\r\n                </Fab>\r\n                <Fab disabled={!ownerID} className={classes.fab} onClick={() => history.push('/contacts/new')}>\r\n                    <AddIcon/>\r\n                </Fab>\r\n                <Fab disabled={!checkedContacts.length} className={classes.fab} onClick={() => deleteContacts()}>\r\n                    <DeleteIcon/>\r\n                </Fab>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useContext} from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FirebaseContext} from \"./Firebase\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport default function SignIn() {\r\n    const history = useHistory();\r\n    const firebase = useContext(FirebaseContext);\r\n    const [loggedIn, setLoggedIn] = React.useState(false);\r\n    firebase.auth.onAuthStateChanged(user => {\r\n        if (user) {\r\n            setLoggedIn(true);\r\n        }\r\n    });\r\n\r\n    const uiConfig = {\r\n        callbacks: {\r\n            signInSuccessWithAuthResult: function (authResult, redirectUrl) {\r\n                // User successfully signed in.\r\n                // Return type determines whether we continue the redirect automatically\r\n                // or whether we leave that to developer to handle.\r\n                history.push('/');\r\n                return false;\r\n            },\r\n        },\r\n        signInSuccessUrl: '/',\r\n        signInFlow: 'popup',\r\n        signInOptions: [\r\n            firebase.googleProvider.providerId,\r\n            {\r\n                provider: 'yahoo.com',\r\n                scopes:['sdpp-w']\r\n            }\r\n        ],\r\n    };\r\n    if (loggedIn) {\r\n        return (<Container>\r\n            <Typography>You are already logged In.</Typography>\r\n            <Button onClick={() => {\r\n                firebase.doSignOut();\r\n                this.setState({loggedIn: false})\r\n            }}>Sign out</Button>\r\n        </Container>)\r\n    }\r\n    return <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth}/>\r\n}\r\n","import React from 'react';\r\nimport {Route, Switch, useLocation, Redirect, useHistory} from \"react-router-dom\";\r\nimport NewCampaign from \"./Campaign/NewCampaign\";\r\nimport NewContact from \"./NewContact\";\r\nimport Contacts from \"./Contacts\";\r\nimport SignIn from \"./SignIn\";\r\n\r\nexport default function RedirectHandler() {\r\n    const history = useHistory();\r\n    const redirectRoute = new URLSearchParams(useLocation().search).get('redirect');\r\n    if (redirectRoute) {\r\n        const actualRoute = redirectRoute.replace(/\\/\\//g, '/');\r\n        history.push(actualRoute);\r\n        return (<div></div>)\r\n    } else {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/campaigns/new\">\r\n                    <NewCampaign/>\r\n                </Route>\r\n                <Route path=\"/contacts/new\">\r\n                    <NewContact/>\r\n                </Route>\r\n                <Route path=\"/contacts\">\r\n                    <Contacts/>\r\n                </Route>\r\n                <Route path=\"/signIn\">\r\n                    <SignIn/>\r\n                </Route>\r\n                <Route path=\"*\">\r\n                    <Redirect to={\"/contacts\"} />\r\n                </Route>\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\nimport DrawerAppBar from './components/DrawerAppBar';\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\nimport RedirectHandler from \"./components/RedirectHandler\";\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://mrKannah.com/\">\r\n                Kannah Services\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nexport default function App() {\r\n    return (\r\n        <Container disableGutters={true} maxWidth=\"md\">\r\n                <Router basename={process.env.PUBLIC_URL}>\r\n                    <DrawerAppBar />\r\n                    <RedirectHandler />\r\n                </Router>\r\n                <Copyright />\r\n        </Container>\r\n    );\r\n}\r\n","import { red } from '@material-ui/core/colors';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#556cd6',\r\n        },\r\n        secondary: {\r\n            main: '#19857b',\r\n        },\r\n        error: {\r\n            main: red.A400,\r\n        },\r\n        background: {\r\n            default: '#fff',\r\n        },\r\n    },\r\n});\r\n\r\nexport default theme;\r\n","import React, {useContext} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport App from './App';\r\nimport theme from './theme';\r\nimport Firebase, { FirebaseContext } from './components/Firebase';\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nfunction NeedsFirebase(props) {\r\n    const [isReady, setIsReady] = React.useState(false);\r\n    const firebase = useContext(FirebaseContext);\r\n    if (!firebase.isListening) {\r\n        firebase.onAuthUserListener(() => setIsReady(true));\r\n    }\r\n    if (isReady) return props.component;\r\n    return <Container disableGutters={true} maxWidth=\"md\">\r\n            <CircularProgress />\r\n        </Container>;\r\n}\r\n\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={theme}>\r\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\r\n        <CssBaseline />\r\n        <FirebaseContext.Provider value={new Firebase()}>\r\n            <NeedsFirebase component={<App />} />\r\n        </FirebaseContext.Provider>,\r\n    </ThemeProvider>,\r\n    document.querySelector('#root'),\r\n);\r\n"],"sourceRoot":""}